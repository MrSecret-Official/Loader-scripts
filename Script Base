local Window = Fluent:CreateWindow({
    Title = "Blaze Hub " .. Fluent.Version,
    SubTitle = "By MrSecret",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    Scripts = Window:AddTab({ Title = "Scripts", Icon = "scroll" }),
    General = Window:AddTab({ Title = "General", Icon = "box" }),
    Test = Window:AddTab({ Title = "Test [W.I.P]", Icon = "flask-conical" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Blaze Hub",
        Content = "Nitro/Premium only Hub",
        SubContent = "Version Pagada del Hub!", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })

    Tabs.Main:AddSection("Información")

    Tabs.Main:AddParagraph({
        Title = "Anuncio",
        Content = "Buenas Chicos.\nDisfrutad de la version en pruebas de la nueva interfaz en pruebas!"
    })



    Tabs.Main:AddButton({
        Title = "Información",
        Description = "Contiene Información del Hub",
        Callback = function()
            Window:Dialog({
                Title = "INFO",
                Content = "Version: 0.0.1 [W.I.P], \nSTATUS: Solara/JJSploits/Celery ✅",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
                            print("Confirmed the dialog.")
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })

    Tabs.Main:AddSection("Creditos")

    Tabs.Main:AddButton({
        Title = "Creditos",
        Description = "Contiene los Creditos de los creadores del Hub",
        Callback = function()
            Window:Dialog({
                Title = "Creditos",
                Content = "Scripter y Dueño: Vixx77 \nHub y Staff Manager: MrSecret",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
                            print("Confirmed the dialog.")
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })

    Tabs.Main:AddButton({
        Title = "Servidor de Discord!",
        Description = "Te lo copia en el clipboard",
        Callback = function()
            setclipboard("https://discord.gg/3wk2pK5Ppq")
            toclipboard("https://discord.gg/3wk2pK5Ppq")

            Fluent:Notify({
                Title = "Blaze Hub",
                Content = "Link del servidor de discord copiado correctamente!",
                SubContent = "Pega el link en tu navegador de confianza y dale a enter", -- Optional
                Duration = 5 -- Set to nil to make the notification not disappear
            })
        end
    })

    Tabs.Scripts:AddSection("Vixx77 Scripts")

    Tabs.Scripts:AddButton({
        Title = "Presione una vez para activar el aimlock [Vixx77]",
        Description = "Una vez activado, presione F1 para ver el GUI del Aimlock",
        Callback = function()
            loadstring(game:HttpGet("https://pastebin.com/raw/PEFZ1wuJ", true))()
        end
    })

    Tabs.Scripts:AddSection("Otros Scripts...")

    Tabs.General:AddSection("Scripts Genericos")

    Tabs.General:AddButton({
        Title = "Presiona una vez para activar Infinite Yield",
        Description = "Puede solucionar problemas con el walkspeed y jumpPower ;)",
        Callback = function()
            loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
        end
    })

    Tabs.General:AddButton({
        Title = "Presiona una vez para activar Dex Explover V4",
        Description = "Presiona UNA sola vez, SOLO funciona en Solara y Celery",
        Callback = function()
            loadstring(game:HttpGet("https://github.com/OfficiallyMelon/BetterDecompiler/raw/main/dex_betterdecompiler.lua"))();
        end
    })

    Tabs.General:AddButton({
        Title = "Presiona una vez para activar Dex Explover V2",
        Description = "Presiona UNA sola vez, SOLO funciona en JJSploits",
        Callback = function()
            loadstring(game:HttpGet("https://cdn.wearedevs.net/scripts/Dex%20Explorer.txt"))()
        end
    })

    Tabs.General:AddSection("Funciones Genericas")

    local Slider = Tabs.General:AddSlider("Slider", {
        Title = "Walkspeed",
        Description = "Velocidad del jugador:",
        Default = 16,
        Min = 0,
        Max = 350,
        Rounding = 1,
        Callback = function(Value)
            print("Walkspeed:", Value)
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
        end
    })

    Slider:OnChanged(function(Value)
        print("WS changed:", Value)
    end)

    Slider:SetValue(16)

    local Slider = Tabs.General:AddSlider("Slider", {
        Title = "JumpPower",
        Description = "Fuerza de Salto:",
        Default = 36,
        Min = 0,
        Max = 300,
        Rounding = 1,
        Callback = function(Value)
            print("JumpPower:", Value)
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
        end
    })

    Slider:OnChanged(function(Value)
        print("JP changed:", Value)
    end)

    Slider:SetValue(35)

    local Toggle = Tabs.General:AddToggle("MyToggle", {Title = "Salto Infinito", Default = false })

    Toggle:OnChanged(function()
          --Toggles the infinite jump between on or off on every script run
          _G.infinjump = not _G.infinjump

          if _G.infinJumpStarted == nil then
             --Ensures this only runs once to save resources
             _G.infinJumpStarted = true
             
             --Notifies readiness
             game.StarterGui:SetCore("SendNotification", {Title="Secret Hub"; Text="Salto Infinito Activado!"; Duration=5;})
          
             --The actual infinite jump
             local plr = game:GetService('Players').LocalPlayer
             local m = plr:GetMouse()
             m.KeyDown:connect(function(k)
                if _G.infinjump then
                   if k:byte() == 32 then
                   humanoid = game:GetService'Players'.LocalPlayer.Character:FindFirstChildOfClass('Humanoid')
                   humanoid:ChangeState('Jumping')
                   wait()
                   humanoid:ChangeState('Seated')
                   end
                end
             end)
          end
      end
   )

    Options.MyToggle:SetValue(false)

    Tabs.General:AddSection("ADVERTENCIA/AVISO")

    Tabs.General:AddParagraph({
        Title = "ADVERTENCIA/AVISO",
        Content = "\nEste apartado es generico y no quiere decir que funcione en todos los juegos y puede ser detectable.\n\nUsalo bajo tu propia responsabilidad."
    })

    local Dropdown = Tabs.Test:AddDropdown("Dropdown", {
        Title = "Dropdown",
        Values = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen"},
        Multi = false,
        Default = 1,
    })

    Dropdown:SetValue("four")

    Dropdown:OnChanged(function(Value)
        print("Dropdown changed:", Value)
    end)


    
    local MultiDropdown = Tabs.Test:AddDropdown("MultiDropdown", {
        Title = "Dropdown",
        Description = "You can select multiple values.",
        Values = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen"},
        Multi = true,
        Default = {"seven", "twelve"},
    })

    MultiDropdown:SetValue({
        three = true,
        five = true,
        seven = false
    })

    MultiDropdown:OnChanged(function(Value)
        local Values = {}
        for Value, State in next, Value do
            table.insert(Values, Value)
        end
        print("Mutlidropdown changed:", table.concat(Values, ", "))
    end)



    local Colorpicker = Tabs.Test:AddColorpicker("Colorpicker", {
        Title = "Colorpicker",
        Default = Color3.fromRGB(96, 205, 255)
    })

    Colorpicker:OnChanged(function()
        print("Colorpicker changed:", Colorpicker.Value)
    end)
    
    Colorpicker:SetValueRGB(Color3.fromRGB(0, 255, 140))



    local TColorpicker = Tabs.Test:AddColorpicker("TransparencyColorpicker", {
        Title = "Colorpicker",
        Description = "but you can change the transparency.",
        Transparency = 0,
        Default = Color3.fromRGB(96, 205, 255)
    })

    TColorpicker:OnChanged(function()
        print(
            "TColorpicker changed:", TColorpicker.Value,
            "Transparency:", TColorpicker.Transparency
        )
    end)



    local Keybind = Tabs.Test:AddKeybind("Keybind", {
        Title = "KeyBind",
        Mode = "Toggle", -- Always, Toggle, Hold
        Default = "LeftControl", -- String as the name of the keybind (MB1, MB2 for mouse buttons)

        -- Occurs when the keybind is clicked, Value is `true`/`false`
        Callback = function(Value)
            print("Keybind clicked!", Value)
        end,

        -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
        ChangedCallback = function(New)
            print("Keybind changed!", New)
        end
    })

    -- OnClick is only fired when you press the keybind and the mode is Toggle
    -- Otherwise, you will have to use Keybind:GetState()
    Keybind:OnClick(function()
        print("Keybind clicked:", Keybind:GetState())
    end)

    Keybind:OnChanged(function()
        print("Keybind changed:", Keybind.Value)
    end)

    task.spawn(function()
        while true do
            wait(1)

            -- example for checking if a keybind is being pressed
            local state = Keybind:GetState()
            if state then
                print("Keybind is being held down")
            end

            if Fluent.Unloaded then break end
        end
    end)

    Keybind:SetValue("MB2", "Toggle") -- Sets keybind to MB2, mode to Hold


    local Input = Tabs.Test:AddInput("Input", {
        Title = "Input",
        Default = "Default",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            print("Input changed:", Value)
        end
    })

    Input:OnChanged(function()
        print("Input updated:", Input.Value)
    end)
end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("Blaze Hub Rework")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Blaze Hub",
    Content = "El Loader se ejecuto correctamente, disfruta de la version en pruebas del loader!",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
